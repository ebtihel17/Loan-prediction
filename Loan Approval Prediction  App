import streamlit as st
import numpy as np
import pandas as pd
import joblib
from sklearn.preprocessing import LabelEncoder

# Load the trained model
model = joblib.load('loan_random_forest_model.pkl')


# Function to preprocess user input
def preprocess_input(data):
    # Create a DataFrame
    input_data = pd.DataFrame(data, index=[0])

    # Encode categorical variables (same as training)
    label_encoder = LabelEncoder()
    categorical_columns = ['Gender', 'Married', 'Dependents', 'Education', 'Self_Employed', 'Property_Area']
    for column in categorical_columns:
        input_data[column] = label_encoder.fit_transform(input_data[column])

    # Apply log transformation to income columns
    input_data['ApplicantIncome'] = np.log1p(input_data['ApplicantIncome'])
    input_data['CoapplicantIncome'] = np.log1p(input_data['CoapplicantIncome'])

    return input_data

# Streamlit app
st.title('Loan Approval Prediction')

# Input fields
gender = st.selectbox('Gender', ['Male', 'Female'])
married = st.selectbox('Married', ['Yes', 'No'])
dependents = st.selectbox('Dependents', ['0', '1', '2', '3+'])
education = st.selectbox('Education', ['Graduate', 'Not Graduate'])
self_employed = st.selectbox('Self Employed', ['Yes', 'No'])
applicant_income = st.number_input('Applicant Income', min_value=0, value=0)
coapplicant_income = st.number_input('Coapplicant Income', min_value=0, value=0)
loan_amount = st.number_input('Loan Amount', min_value=0, value=0)
loan_amount_term = st.number_input('Loan Amount Term', min_value=0, value=360)
credit_history = st.selectbox('Credit History', ['0', '1'])
property_area = st.selectbox('Property Area', ['Urban', 'Semiurban', 'Rural'])



# Create input data
input_data = {
    'Gender': gender,
    'Married': married,
    'Dependents': dependents,
    'Education': education,
    'Self_Employed': self_employed,
    'ApplicantIncome': applicant_income,
    'CoapplicantIncome': coapplicant_income,
    'LoanAmount': loan_amount,
    'Loan_Amount_Term': loan_amount_term,
    'Credit_History': credit_history,
    'Property_Area': property_area
}


# Predict button
if st.button('Predict'):
    input_data = preprocess_input(input_data)
    prediction = model.predict(input_data)[0]
    prediction_proba = model.predict_proba(input_data)[0]

    if prediction == 1:
        st.success(f'Loan Approved with a probability of {prediction_proba[1]:.2f}')
    else:
        st.error(f'Loan Rejected with a probability of {prediction_proba[0]:.2f}')
